use byteorder::{LittleEndian, ReadBytesExt, WriteBytesExt};

use crate::bytes::{FixedLengthByteArrays, ReadFixedLengthByteArray};
use crate::packets::{PacketError, PacketHeader};
use crate::text::{Language, LanguageError};

// TODO: think a bit more about this? is this the best way to do this? it's probably ok ...
pub const PACKET_FILENAME_LANGUAGE: Language = Language::English;

pub const QUEST_HEADER_NAME_SIZE: usize = 32;
pub const QUEST_HEADER_FILENAME_SIZE: usize = 16;

pub const PACKET_ID_QUEST_HEADER_ONLINE: u8 = 0x44;
pub const PACKET_ID_QUEST_HEADER_OFFLINE: u8 = 0xa6;

#[derive(Debug, Eq, PartialEq)]
pub enum QuestPacketFileType {
    Bin,
    Dat,
    Unknown,
}

impl QuestPacketFileType {
    pub fn from(source: &[u8]) -> QuestPacketFileType {
        let source = source.as_unpadded_slice();
        if source.ends_with(b".bin") {
            QuestPacketFileType::Bin
        } else if source.ends_with(b".dat") {
            QuestPacketFileType::Dat
        } else {
            QuestPacketFileType::Unknown
        }
    }
}

#[derive(Debug, Copy, Clone)]
#[repr(C, packed)]
pub struct QuestHeaderPacket {
    pub header: PacketHeader,
    pub name: [u8; QUEST_HEADER_NAME_SIZE],
    pub unused: u16,
    pub flags: u16,
    pub filename: [u8; QUEST_HEADER_FILENAME_SIZE],
    pub size: u32,
}

impl QuestHeaderPacket {
    pub const fn packet_size() -> usize {
        std::mem::size_of::<Self>()
    }

    pub fn new(
        name: &str,
        language: Language,
        filename: &str,
        data_size: usize,
        is_online: bool,
    ) -> Result<QuestHeaderPacket, PacketError> {
        if name.len() > QUEST_HEADER_NAME_SIZE {
            return Err(PacketError::DataFormatError(format!(
                "name is too large ({} characters, should be {} or less)",
                name.len(),
                QUEST_HEADER_NAME_SIZE
            )));
        }
        if filename.len() > QUEST_HEADER_FILENAME_SIZE {
            return Err(PacketError::DataFormatError(format!(
                "filename is too large ({} characters, should be {} or less)",
                filename.len(),
                QUEST_HEADER_FILENAME_SIZE
            )));
        }

        Ok(QuestHeaderPacket {
            header: PacketHeader {
                id: if is_online {
                    PACKET_ID_QUEST_HEADER_ONLINE
                } else {
                    PACKET_ID_QUEST_HEADER_OFFLINE
                },
                flags: 0,
                size: Self::packet_size() as u16,
            },
            name: language.encode_text(name)?.to_array(),
            unused: 0,
            flags: 0,
            filename: PACKET_FILENAME_LANGUAGE.encode_text(filename)?.to_array(),
            size: data_size as u32,
        })
    }

    pub fn from_bytes<T: ReadBytesExt>(reader: &mut T) -> Result<QuestHeaderPacket, PacketError>
    where
        Self: Sized,
    {
        let header = PacketHeader::from_bytes(reader)?;
        if header.id != PACKET_ID_QUEST_HEADER_ONLINE && header.id != PACKET_ID_QUEST_HEADER_OFFLINE
        {
            return Err(PacketError::WrongId(header.id));
        }
        if header.size != Self::packet_size() as u16 {
            return Err(PacketError::WrongSize(header.size));
        }

        Self::from_header_and_bytes(header, reader)
    }

    pub fn from_header_and_bytes<T: ReadBytesExt>(
        header: PacketHeader,
        reader: &mut T,
    ) -> Result<Self, PacketError>
    where
        Self: Sized,
    {
        let name: [u8; QUEST_HEADER_NAME_SIZE] = reader.read_bytes()?;
        let unused = reader.read_u16::<LittleEndian>()?;
        let flags = reader.read_u16::<LittleEndian>()?;
        let filename: [u8; QUEST_HEADER_FILENAME_SIZE] = reader.read_bytes()?;
        let size = reader.read_u32::<LittleEndian>()?;

        Ok(QuestHeaderPacket {
            header,
            name,
            unused,
            flags,
            filename,
            size,
        })
    }

    pub fn write_bytes<T: WriteBytesExt>(&self, writer: &mut T) -> Result<(), PacketError> {
        self.header.write_bytes(writer)?;
        writer.write_all(&self.name)?;
        writer.write_u16::<LittleEndian>(self.unused)?;
        writer.write_u16::<LittleEndian>(self.flags)?;
        writer.write_all(&self.filename)?;
        writer.write_u32::<LittleEndian>(self.size)?;
        Ok(())
    }

    pub fn name_str(&self) -> Result<String, LanguageError> {
        PACKET_FILENAME_LANGUAGE.decode_text(self.name.as_unpadded_slice())
    }

    pub fn filename_str(&self) -> Result<String, LanguageError> {
        PACKET_FILENAME_LANGUAGE.decode_text(self.filename.as_unpadded_slice())
    }

    pub fn file_type(&self) -> QuestPacketFileType {
        QuestPacketFileType::from(&self.filename)
    }
}

pub const PACKET_ID_QUEST_DATA_ONLINE: u8 = 0x13;
pub const PACKET_ID_QUEST_DATA_OFFLINE: u8 = 0xa7;
pub const QUEST_DATA_PACKET_DATA_SIZE: usize = 1024;

#[derive(Debug, Copy, Clone)]
#[repr(C, packed)]
pub struct QuestDataPacket {
    pub header: PacketHeader,
    pub filename: [u8; QUEST_HEADER_FILENAME_SIZE],
    pub data: [u8; QUEST_DATA_PACKET_DATA_SIZE],
    pub size: u32,
}

impl QuestDataPacket {
    pub const fn packet_size() -> usize {
        std::mem::size_of::<Self>()
    }

    pub fn new(
        filename: &str,
        src: &[u8],
        is_online: bool,
    ) -> Result<QuestDataPacket, PacketError> {
        if filename.len() > QUEST_HEADER_FILENAME_SIZE {
            return Err(PacketError::DataFormatError(format!(
                "filename is too large ({} characters, should be {} or less)",
                filename.len(),
                QUEST_HEADER_FILENAME_SIZE
            )));
        }
        if src.len() > QUEST_DATA_PACKET_DATA_SIZE {
            return Err(PacketError::DataFormatError(format!(
                "Data buffer is too large ({} bytes, should be {} or less)",
                src.len(),
                QUEST_DATA_PACKET_DATA_SIZE
            )));
        }

        // remaining bytes (if any) will be zeros
        let mut data = [0u8; QUEST_DATA_PACKET_DATA_SIZE];
        data[0..src.len()].copy_from_slice(src);

        Ok(QuestDataPacket {
            header: PacketHeader {
                id: if is_online {
                    PACKET_ID_QUEST_DATA_ONLINE
                } else {
                    PACKET_ID_QUEST_DATA_OFFLINE
                },
                flags: 0,
                size: Self::packet_size() as u16,
            },
            filename: PACKET_FILENAME_LANGUAGE.encode_text(filename)?.to_array(),
            data,
            size: src.len() as u32,
        })
    }

    pub fn from_bytes<T: ReadBytesExt>(reader: &mut T) -> Result<QuestDataPacket, PacketError>
    where
        Self: Sized,
    {
        let header = PacketHeader::from_bytes(reader)?;
        if header.id != PACKET_ID_QUEST_DATA_ONLINE && header.id != PACKET_ID_QUEST_DATA_OFFLINE {
            return Err(PacketError::WrongId(header.id));
        }
        if header.size != Self::packet_size() as u16 {
            return Err(PacketError::WrongSize(header.size));
        }

        Self::from_header_and_bytes(header, reader)
    }

    pub fn from_header_and_bytes<T: ReadBytesExt>(
        header: PacketHeader,
        reader: &mut T,
    ) -> Result<QuestDataPacket, PacketError>
    where
        Self: Sized,
    {
        let filename: [u8; QUEST_HEADER_FILENAME_SIZE] = reader.read_bytes()?;
        let data: [u8; QUEST_DATA_PACKET_DATA_SIZE] = reader.read_bytes()?;
        let size = reader.read_u32::<LittleEndian>()?;
        if size > QUEST_DATA_PACKET_DATA_SIZE as u32 {
            return Err(PacketError::DataFormatError(format!(
                "Data chunk size field value is too large: {}",
                size
            )));
        }

        Ok(QuestDataPacket {
            header,
            filename,
            data,
            size,
        })
    }

    pub fn write_bytes<T: WriteBytesExt>(&self, writer: &mut T) -> Result<(), PacketError> {
        self.header.write_bytes(writer)?;
        writer.write_all(&self.filename)?;
        writer.write_all(&self.data)?;
        writer.write_u32::<LittleEndian>(self.size)?;
        Ok(())
    }

    pub fn filename_str(&self) -> Result<String, LanguageError> {
        PACKET_FILENAME_LANGUAGE.decode_text(self.filename.as_unpadded_slice())
    }

    pub fn file_type(&self) -> QuestPacketFileType {
        QuestPacketFileType::from(&self.filename)
    }

    pub fn data_size(&self) -> u32 {
        self.size
    }

    pub fn data(&self) -> &[u8] {
        &self.data[0..self.size as usize]
    }
}

#[cfg(test)]
mod tests {
    use claim::*;

    use super::*;

    #[test]
    pub fn create_quest_header_packet_from_bytes() -> Result<(), PacketError> {
        // dat
        let mut bytes: &[u8] = &[
            0xA6, 0xC9, 0x3C, 0x00, 0x4C, 0x6F, 0x73, 0x74, 0x20, 0x48, 0x45, 0x41, 0x54, 0x20,
            0x53, 0x57, 0x4F, 0x52, 0x44, 0x3A, 0x32, 0x2D, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x64, 0x71,
            0x75, 0x65, 0x73, 0x74, 0x35, 0x38, 0x2E, 0x64, 0x61, 0x74, 0x00, 0x00, 0x00, 0x00,
            0x01, 0x3B, 0x00, 0x00,
        ];

        let packet = QuestHeaderPacket::from_bytes(&mut bytes)?;
        assert_eq!(packet.header.id(), PACKET_ID_QUEST_HEADER_OFFLINE);
        assert_eq!(
            packet.header.size(),
            QuestHeaderPacket::packet_size() as u16
        );
        assert_eq!(packet.name_str()?, "Lost HEAT SWORD:2-1");
        assert_eq!(packet.filename_str()?, "dquest58.dat");
        assert_eq!(packet.file_type(), QuestPacketFileType::Dat);

        // bin
        let mut bytes: &[u8] = &[
            0xA6, 0x88, 0x3C, 0x00, 0x4C, 0x6F, 0x73, 0x74, 0x20, 0x48, 0x45, 0x41, 0x54, 0x20,
            0x53, 0x57, 0x4F, 0x52, 0x44, 0x3A, 0x32, 0x2D, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x71,
            0x75, 0x65, 0x73, 0x74, 0x35, 0x38, 0x2E, 0x62, 0x69, 0x6E, 0x00, 0x00, 0x00, 0x00,
            0x23, 0x06, 0x00, 0x00,
        ];

        let packet = QuestHeaderPacket::from_bytes(&mut bytes)?;
        assert_eq!(packet.header.id(), PACKET_ID_QUEST_HEADER_OFFLINE);
        assert_eq!(
            packet.header.size(),
            QuestHeaderPacket::packet_size() as u16
        );
        assert_eq!(packet.name_str()?, "Lost HEAT SWORD:2-2");
        assert_eq!(packet.filename_str()?, "dquest58.bin");
        assert_eq!(packet.file_type(), QuestPacketFileType::Bin);

        Ok(())
    }

    #[test]
    pub fn create_quest_data_packet_from_bytes() -> Result<(), PacketError> {
        // dat
        let mut bytes: &[u8] = &[
            0xA7, 0x00, 0x18, 0x04, 0x64, 0x71, 0x75, 0x65, 0x73, 0x74, 0x35, 0x38, 0x2E, 0x64,
            0x61, 0x74, 0x00, 0x00, 0x00, 0x00, 0xDC, 0x8F, 0x00, 0x00, 0x1B, 0x09, 0x38, 0x63,
            0x7B, 0xC2, 0x03, 0xBE, 0x96, 0x53, 0xE7, 0xA5, 0x12, 0x9B, 0x0B, 0xC8, 0x22, 0x17,
            0x7E, 0x12, 0xC8, 0xF4, 0x81, 0x2A, 0x3D, 0x22, 0x77, 0x03, 0x73, 0x96, 0x62, 0xDE,
            0x99, 0xC7, 0xD6, 0xB3, 0x04, 0x0C, 0x7F, 0x53, 0x5E, 0x28, 0xEF, 0xB4, 0x4D, 0x08,
            0xA7, 0xA2, 0xD0, 0x86, 0x6A, 0x5D, 0xA8, 0xB9, 0x9A, 0x4E, 0x60, 0x37, 0x3D, 0x56,
            0x9D, 0xF4, 0x5C, 0xF2, 0xCC, 0x7A, 0xF3, 0x81, 0x60, 0x8F, 0x71, 0xB4, 0xD3, 0x1E,
            0xE0, 0xAE, 0xE2, 0x0B, 0xF5, 0xF6, 0x69, 0x0D, 0x91, 0x62, 0x2E, 0xE4, 0x31, 0x84,
            0xF6, 0x8F, 0xD0, 0xEB, 0x72, 0x14, 0x70, 0x6B, 0xD2, 0xF7, 0x95, 0x7C, 0xA0, 0x5C,
            0xA1, 0x11, 0xC2, 0x5B, 0xD9, 0x1A, 0x30, 0x12, 0xE1, 0x74, 0x20, 0x8A, 0xA6, 0x58,
            0xDF, 0xF1, 0x6A, 0xA3, 0xA0, 0xC7, 0xAB, 0x93, 0x39, 0x76, 0xE7, 0xD2, 0x6A, 0x7B,
            0xB5, 0x69, 0x84, 0x64, 0x15, 0x9A, 0x7C, 0x3C, 0xDD, 0x4F, 0x4D, 0xB8, 0x67, 0x85,
            0xC8, 0x1D, 0xC7, 0x59, 0x73, 0x54, 0x7C, 0xEE, 0xA9, 0x72, 0xED, 0xCF, 0x5B, 0x0E,
            0x05, 0x4C, 0x3C, 0x67, 0xEC, 0x3E, 0xF4, 0x00, 0xF1, 0x67, 0x1B, 0xEB, 0xCC, 0x78,
            0x2D, 0x68, 0x26, 0xB2, 0x5E, 0x60, 0x69, 0x2B, 0x42, 0xB3, 0x91, 0xF8, 0xBF, 0xD1,
            0x85, 0xEA, 0x2E, 0x41, 0xDD, 0xD3, 0x09, 0x5F, 0x2A, 0xCF, 0xD3, 0x10, 0x8D, 0xA2,
            0x8F, 0x8A, 0x7B, 0x4B, 0xF3, 0x6A, 0x61, 0xD5, 0x2A, 0x32, 0x3C, 0x28, 0x74, 0x7E,
            0xD6, 0x7B, 0x11, 0x46, 0xC9, 0x36, 0x5B, 0xA3, 0x27, 0x9A, 0xE1, 0xEC, 0x40, 0x83,
            0x24, 0x57, 0xA8, 0x09, 0xB1, 0x63, 0xDC, 0x33, 0x69, 0x7A, 0x17, 0x4E, 0x51, 0x7B,
            0x7F, 0x16, 0xFD, 0x63, 0x50, 0x3A, 0x34, 0x5E, 0x64, 0x20, 0x3A, 0xEB, 0x71, 0x42,
            0x53, 0x83, 0xE9, 0xDF, 0x73, 0xF6, 0x1C, 0xBB, 0x83, 0x1B, 0x28, 0x03, 0x20, 0x48,
            0xB9, 0x73, 0xF4, 0x13, 0x0D, 0x6D, 0x38, 0x02, 0x44, 0x2D, 0xEB, 0x3A, 0x0D, 0x9A,
            0xFC, 0x59, 0x5B, 0x56, 0x47, 0x13, 0xB3, 0x00, 0xE8, 0x22, 0x22, 0x6F, 0xAF, 0x8D,
            0x60, 0x69, 0xB4, 0x25, 0xD2, 0x92, 0xE9, 0xD9, 0xBE, 0xB3, 0x50, 0x53, 0xBB, 0xF8,
            0x3F, 0xE9, 0x07, 0xD3, 0x7B, 0xAD, 0x46, 0x67, 0xCF, 0xA8, 0xDD, 0x14, 0xFD, 0x42,
            0x36, 0x27, 0x3A, 0x34, 0x75, 0x8E, 0xC8, 0xEB, 0xFD, 0x72, 0x84, 0x84, 0xF5, 0x88,
            0xF6, 0x86, 0xB6, 0x8F, 0x71, 0x0F, 0x73, 0xC8, 0x95, 0x79, 0x2A, 0x16, 0x04, 0x1A,
            0x05, 0x83, 0x30, 0xE9, 0xC9, 0x6A, 0xDF, 0xCA, 0x42, 0x24, 0xE4, 0xE9, 0x97, 0x81,
            0xC0, 0x0B, 0xD7, 0x3A, 0x84, 0xAD, 0xCE, 0x06, 0xCE, 0xAD, 0xA7, 0x50, 0xA1, 0xD4,
            0xE9, 0x7B, 0x0D, 0x77, 0xF7, 0x1F, 0xCF, 0x0F, 0xBD, 0x3D, 0x97, 0x11, 0x47, 0xCE,
            0x46, 0x83, 0x8E, 0x98, 0x1B, 0xDB, 0xFA, 0xEC, 0xB1, 0x50, 0xD7, 0x3A, 0x2F, 0xC6,
            0xB8, 0x4B, 0xE9, 0xF8, 0xE5, 0x01, 0x5C, 0xC7, 0x6B, 0x10, 0x9B, 0xE5, 0x6E, 0xEE,
            0x08, 0x12, 0xE5, 0xE6, 0x9B, 0xE6, 0x75, 0x26, 0xD8, 0x41, 0xB4, 0x31, 0xCE, 0x54,
            0xD1, 0x71, 0x92, 0x67, 0x4E, 0xE5, 0x7C, 0x3F, 0x70, 0x02, 0x1B, 0xFC, 0x7B, 0x8F,
            0x98, 0x0A, 0xF7, 0x09, 0x2D, 0x8D, 0xC7, 0x88, 0x65, 0x05, 0x60, 0x91, 0x77, 0x9E,
            0x16, 0x02, 0x32, 0xF7, 0x78, 0x52, 0xD2, 0x0D, 0x91, 0x23, 0xD9, 0xCC, 0x23, 0x21,
            0x77, 0xD4, 0x19, 0x55, 0x19, 0xB6, 0x68, 0xB7, 0xE8, 0xF7, 0x6B, 0x2C, 0x5F, 0x92,
            0x59, 0x8E, 0x9D, 0x79, 0xAE, 0x48, 0xE0, 0xDD, 0x3D, 0x7E, 0x09, 0x52, 0x06, 0xEC,
            0x70, 0x3D, 0x5F, 0xB3, 0x19, 0xB0, 0xD2, 0x7C, 0xF7, 0xA1, 0xFA, 0xAD, 0x78, 0x24,
            0x23, 0xB6, 0x89, 0xAC, 0x69, 0x9B, 0xAB, 0xF1, 0xD6, 0xA7, 0x78, 0x45, 0x63, 0xDD,
            0x00, 0x3A, 0x3C, 0xD0, 0x54, 0x77, 0xEF, 0xE5, 0xD7, 0x0B, 0xA7, 0x72, 0x92, 0x7F,
            0xAF, 0xD2, 0xBD, 0x7D, 0xFA, 0x24, 0x69, 0x6F, 0xAE, 0x77, 0x76, 0x78, 0x44, 0x0D,
            0x28, 0x6F, 0xB8, 0xA5, 0x1A, 0xE6, 0x2F, 0x23, 0xD3, 0x7A, 0xB4, 0x18, 0x55, 0x02,
            0x33, 0xD6, 0x00, 0xD1, 0x8F, 0xAB, 0x6D, 0x64, 0x62, 0x12, 0x5B, 0x8C, 0x79, 0xE6,
            0xFF, 0xEE, 0x64, 0x5F, 0xBC, 0xE5, 0xF2, 0xC2, 0x0A, 0xB0, 0x9B, 0x8E, 0x54, 0x75,
            0x7D, 0x06, 0x6B, 0xDE, 0x42, 0x30, 0x34, 0xA1, 0xA1, 0x93, 0xC9, 0xFB, 0x37, 0x08,
            0xE3, 0x28, 0x23, 0x6F, 0x6A, 0x5D, 0x98, 0x6F, 0x63, 0x23, 0x60, 0x4E, 0xCB, 0xF2,
            0xB4, 0x0C, 0x4B, 0x95, 0x3D, 0xCE, 0xBC, 0xF7, 0x91, 0x2A, 0xAE, 0x71, 0x9D, 0x8C,
            0x86, 0x28, 0x19, 0x40, 0x85, 0xE2, 0x94, 0x5C, 0xA5, 0xB8, 0xDA, 0x0B, 0x96, 0x67,
            0x72, 0xA5, 0xED, 0xAC, 0xAD, 0x4C, 0x7D, 0x2E, 0x84, 0xDE, 0x33, 0x9A, 0x36, 0xF9,
            0x3D, 0xA0, 0x54, 0x35, 0x2E, 0xA6, 0x8F, 0xD6, 0x02, 0x23, 0x97, 0x0B, 0xE4, 0x31,
            0xBD, 0x90, 0xAA, 0x61, 0xC5, 0x42, 0x14, 0xF9, 0x82, 0xF8, 0x88, 0x44, 0xF3, 0xA8,
            0xAA, 0x91, 0xAE, 0xA3, 0xB3, 0x59, 0xF5, 0x79, 0x3D, 0xDB, 0xFC, 0x60, 0xA0, 0xEB,
            0x5B, 0x55, 0xAF, 0xF1, 0xD7, 0x37, 0xF1, 0x68, 0xFC, 0x1C, 0x49, 0x5E, 0xF5, 0x89,
            0x03, 0x46, 0x71, 0xB1, 0x3F, 0x04, 0x33, 0x3D, 0x17, 0x10, 0x30, 0x31, 0xE9, 0x0B,
            0xDD, 0x7E, 0x4B, 0x84, 0x9B, 0x95, 0x5F, 0x18, 0x2A, 0xC9, 0x5F, 0xFE, 0xF8, 0x7E,
            0x70, 0xA7, 0x50, 0xC3, 0x93, 0x59, 0x61, 0x2E, 0x05, 0x06, 0x2B, 0x65, 0x1F, 0xB2,
            0xD5, 0x88, 0x8C, 0x42, 0x01, 0x42, 0xDF, 0x93, 0x63, 0x15, 0x33, 0x71, 0x92, 0x09,
            0x0A, 0xEA, 0x1B, 0x1F, 0x08, 0x39, 0xCC, 0x69, 0x0A, 0x13, 0xE2, 0x52, 0x01, 0x64,
            0x7E, 0xAF, 0xC7, 0x2B, 0x93, 0x10, 0xD0, 0xC1, 0x46, 0xF4, 0x13, 0xE3, 0xF6, 0x89,
            0x82, 0xFF, 0x73, 0x0F, 0xEA, 0x60, 0x3A, 0xFD, 0x7E, 0xD0, 0xDF, 0x7F, 0x3A, 0x13,
            0x20, 0x5D, 0x68, 0x43, 0xA7, 0x2B, 0x22, 0x03, 0x43, 0xD3, 0x47, 0xE6, 0x7E, 0xDE,
            0x2E, 0xE4, 0xC2, 0xAA, 0x4E, 0x4F, 0x5D, 0xF3, 0x9E, 0x50, 0xBD, 0xFF, 0xD9, 0x79,
            0x88, 0x3D, 0x0F, 0xF4, 0x0A, 0xA1, 0xB3, 0x40, 0x44, 0x7C, 0x04, 0xFF, 0xC7, 0x55,
            0xE5, 0x46, 0xEF, 0x11, 0x10, 0x73, 0x9F, 0x77, 0x35, 0x41, 0x2A, 0x08, 0x18, 0x23,
            0xE5, 0xB6, 0xDB, 0x09, 0x01, 0x05, 0x21, 0xAA, 0x61, 0x21, 0xD1, 0xB0, 0x12, 0xE3,
            0x92, 0x4A, 0xAD, 0x24, 0xA2, 0x53, 0x4A, 0xBA, 0x20, 0x34, 0x85, 0x7D, 0xB9, 0xF9,
            0x97, 0xF0, 0xF9, 0x13, 0xA7, 0x58, 0xDE, 0x9C, 0xA5, 0xA9, 0x09, 0xE7, 0x8A, 0xAD,
            0x7D, 0xCA, 0x61, 0x2E, 0xFD, 0x78, 0x86, 0xE7, 0xDF, 0x6B, 0x61, 0x39, 0x2C, 0xDE,
            0x9F, 0x1D, 0x4F, 0x87, 0x1F, 0x76, 0xAE, 0xA6, 0x5B, 0x0D, 0xD5, 0x3D, 0x15, 0x25,
            0x84, 0xD3, 0xA0, 0xE1, 0x1B, 0xAC, 0xC1, 0x8B, 0x9A, 0x9A, 0x7C, 0x82, 0x64, 0x29,
            0xAD, 0x4A, 0x93, 0x76, 0x24, 0x64, 0x15, 0x31, 0x1D, 0xAB, 0x8F, 0xD2, 0xDB, 0x63,
            0x88, 0x3A, 0x39, 0x69, 0x80, 0x78, 0x5D, 0x32, 0x8B, 0xAE, 0xB3, 0xD4, 0x12, 0xCD,
            0xBF, 0x7A, 0x3B, 0x02, 0xA0, 0x89, 0x66, 0xC7, 0x27, 0x60, 0x42, 0x07, 0x13, 0x5A,
            0x95, 0x4C, 0x1C, 0x07, 0x15, 0x91, 0x8D, 0x0D, 0x00, 0x04, 0x00, 0x00,
        ];

        let packet = QuestDataPacket::from_bytes(&mut bytes)?;
        assert_eq!(packet.header.id(), PACKET_ID_QUEST_DATA_OFFLINE);
        assert_eq!(packet.header.size(), QuestDataPacket::packet_size() as u16);
        assert_eq!(packet.filename_str()?, "dquest58.dat");
        assert_eq!(packet.file_type(), QuestPacketFileType::Dat);
        assert_eq!(packet.data_size(), 1024);

        //bin
        let mut bytes: &[u8] = &[
            0xA7, 0x01, 0x18, 0x04, 0x64, 0x71, 0x75, 0x65, 0x73, 0x74, 0x35, 0x38, 0x2E, 0x62,
            0x69, 0x6E, 0x00, 0x00, 0x00, 0x00, 0xDB, 0xCF, 0x73, 0x74, 0x09, 0x46, 0x72, 0x65,
            0xB6, 0x44, 0xE8, 0xE9, 0xB3, 0xD6, 0xE6, 0x88, 0xF7, 0x3C, 0xF9, 0xC0, 0x05, 0xED,
            0x58, 0xE1, 0xAA, 0x17, 0x14, 0x70, 0xB4, 0xD0, 0x5A, 0x25, 0xA6, 0x85, 0x26, 0x24,
            0x19, 0xDF, 0x0C, 0xC4, 0x1F, 0x4B, 0xA6, 0xC1, 0xF1, 0x4E, 0x1C, 0x35, 0x56, 0x0C,
            0x31, 0xF7, 0x2F, 0xC8, 0x0B, 0xDC, 0xA0, 0xCD, 0x5F, 0xBE, 0x2C, 0x29, 0xF5, 0xE2,
            0x40, 0xA4, 0x9D, 0xD7, 0xC4, 0xFA, 0x74, 0x9B, 0x7A, 0xF2, 0x8A, 0xB6, 0x42, 0x3B,
            0xF8, 0x3A, 0x76, 0x78, 0xAA, 0x1B, 0xC4, 0xAA, 0xD3, 0x5E, 0x8A, 0x37, 0x94, 0xC0,
            0xA5, 0x21, 0x7F, 0x01, 0x8E, 0x68, 0x1A, 0xF4, 0xBC, 0xCA, 0x82, 0x02, 0xC1, 0x07,
            0x5C, 0xDB, 0xEE, 0x28, 0x92, 0x91, 0xF2, 0x6C, 0x79, 0x05, 0x8E, 0xC4, 0xB5, 0xAC,
            0xC7, 0x13, 0xD7, 0x5F, 0x8C, 0x0C, 0x21, 0x84, 0x29, 0xC1, 0xFF, 0x0B, 0x78, 0xCF,
            0x35, 0x87, 0xEB, 0xF8, 0x6E, 0x11, 0x41, 0x6A, 0xE4, 0xDD, 0x93, 0x3F, 0x1D, 0x63,
            0x3C, 0xA3, 0x3E, 0xAA, 0x5C, 0x62, 0x4A, 0x26, 0xFB, 0xBC, 0x55, 0xC9, 0x2A, 0x28,
            0xF7, 0xD2, 0x7A, 0x1B, 0x53, 0xCD, 0xF3, 0x67, 0xCD, 0x02, 0x0E, 0x26, 0xBA, 0x0B,
            0xCE, 0x44, 0x4B, 0x78, 0x6B, 0xE6, 0xDE, 0xC6, 0x06, 0x52, 0xD7, 0xCB, 0x97, 0x17,
            0xCB, 0x8A, 0x9A, 0x2C, 0x89, 0x68, 0x0A, 0x1D, 0x5E, 0xBA, 0xD1, 0x3B, 0xF5, 0x63,
            0x99, 0x70, 0x71, 0x2F, 0x37, 0x8A, 0x07, 0xFF, 0x59, 0x1F, 0x10, 0x45, 0xC0, 0x02,
            0x7E, 0xF6, 0xFF, 0x32, 0xB7, 0xAA, 0xD8, 0x0A, 0xF8, 0x43, 0x86, 0x30, 0x61, 0x48,
            0xEE, 0x8E, 0x0A, 0xB4, 0x2F, 0x85, 0x8F, 0x6D, 0x16, 0x96, 0x99, 0x2A, 0x5B, 0xE5,
            0x93, 0x47, 0x61, 0x30, 0xF3, 0x1F, 0x3E, 0x48, 0xFF, 0x6D, 0xE9, 0x64, 0xB8, 0xA3,
            0x6F, 0x33, 0xCD, 0x6D, 0x55, 0x40, 0xC2, 0x10, 0x1F, 0x0B, 0xBB, 0xBA, 0x77, 0xC6,
            0x7E, 0x82, 0x71, 0xA5, 0xEF, 0x25, 0x87, 0x06, 0x6B, 0x6B, 0x3D, 0x48, 0xBF, 0x1B,
            0x1A, 0x1C, 0x6C, 0x80, 0x6D, 0xC2, 0xCB, 0x15, 0x6F, 0x28, 0x66, 0xAA, 0xD9, 0xF0,
            0x53, 0xB5, 0xD0, 0x14, 0xCD, 0x19, 0xC9, 0xB0, 0xBC, 0x5A, 0x31, 0xF8, 0x5E, 0x96,
            0x54, 0xA0, 0xDF, 0x76, 0xE1, 0xEB, 0x0A, 0xC2, 0xF3, 0x96, 0x2D, 0x95, 0xD2, 0x49,
            0xCA, 0x10, 0x1D, 0xD1, 0x7A, 0xAF, 0x5B, 0x73, 0x71, 0xB6, 0x0A, 0xD8, 0x8F, 0xF1,
            0x4E, 0x5E, 0x3B, 0xA0, 0xD0, 0xB7, 0x3B, 0x96, 0xC0, 0x22, 0xDB, 0x2D, 0x6A, 0x95,
            0x4E, 0xC2, 0x95, 0x76, 0xB9, 0x14, 0xEC, 0x8E, 0x8D, 0x48, 0xD8, 0x41, 0x66, 0x74,
            0xD2, 0x81, 0xE8, 0xDA, 0x4B, 0xB6, 0x77, 0x92, 0x6E, 0xA3, 0x85, 0xF4, 0x67, 0x38,
            0x60, 0xD3, 0x5A, 0x38, 0x37, 0x8D, 0xE3, 0x7B, 0x20, 0xBA, 0x3E, 0x0E, 0x34, 0x15,
            0xBB, 0x17, 0x9A, 0xA9, 0xE0, 0xF0, 0x20, 0x28, 0x14, 0xD5, 0x94, 0x7B, 0xEF, 0xEF,
            0xBA, 0x7E, 0x41, 0x98, 0x41, 0x88, 0xA4, 0x8B, 0xC8, 0x5D, 0x2C, 0xBD, 0xE2, 0x13,
            0xC4, 0x00, 0xC9, 0x6A, 0x1A, 0x43, 0x75, 0xDA, 0x0C, 0xCE, 0x3D, 0x1E, 0x8E, 0xA4,
            0x0F, 0xD8, 0x4C, 0xAE, 0x60, 0x46, 0xA3, 0xF0, 0x98, 0x35, 0x90, 0x86, 0xE9, 0x04,
            0xF9, 0xA1, 0x05, 0xBC, 0xA9, 0x11, 0x7B, 0xE9, 0xA6, 0x3D, 0x80, 0x37, 0x94, 0xAE,
            0xCC, 0x44, 0x67, 0xD1, 0x8B, 0x7D, 0xDC, 0x25, 0xED, 0x55, 0xB2, 0x50, 0x30, 0xAA,
            0x8B, 0x4D, 0x50, 0xC8, 0x19, 0xEA, 0x7F, 0x80, 0x5E, 0xDA, 0xF2, 0x2B, 0xED, 0x70,
            0xBE, 0xD7, 0x2A, 0xE5, 0x66, 0x09, 0x7D, 0x05, 0x2E, 0xE5, 0x19, 0x49, 0xA9, 0x0D,
            0xB5, 0xA9, 0x55, 0x52, 0xCE, 0x06, 0x31, 0x65, 0x3E, 0x09, 0x7F, 0x07, 0x5D, 0x51,
            0xCD, 0x96, 0xB6, 0xA3, 0x65, 0x38, 0x52, 0x37, 0x69, 0xC3, 0xA0, 0x4E, 0xEE, 0x65,
            0xBA, 0x3C, 0x0B, 0x5C, 0x2B, 0x23, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x02, 0x00, 0x00,
        ];

        let packet = QuestDataPacket::from_bytes(&mut bytes)?;
        assert_eq!(packet.header.id(), PACKET_ID_QUEST_DATA_OFFLINE);
        assert_eq!(packet.header.size(), QuestDataPacket::packet_size() as u16);
        assert_eq!(packet.filename_str()?, "dquest58.bin");
        assert_eq!(packet.file_type(), QuestPacketFileType::Bin);
        assert_eq!(packet.data_size(), 547);

        Ok(())
    }

    #[test]
    pub fn create_quest_header_packet_via_new() -> Result<(), PacketError> {
        // bin
        let packet =
            QuestHeaderPacket::new("My Quest", Language::English, "myquest.bin", 424242, true)?;
        assert_eq!(packet.header.id(), PACKET_ID_QUEST_HEADER_ONLINE);
        assert_eq!(
            packet.header.size(),
            QuestHeaderPacket::packet_size() as u16
        );
        assert_eq!(packet.name_str()?, "My Quest");
        assert_eq!(packet.filename_str()?, "myquest.bin");
        assert_eq!(packet.file_type(), QuestPacketFileType::Bin);

        // dat
        let packet = QuestHeaderPacket::new(
            "Some Kind Of Quest",
            Language::English,
            "somequest.dat",
            123456,
            true,
        )?;
        assert_eq!(packet.header.id(), PACKET_ID_QUEST_HEADER_ONLINE);
        assert_eq!(
            packet.header.size(),
            QuestHeaderPacket::packet_size() as u16
        );
        assert_eq!(packet.name_str()?, "Some Kind Of Quest");
        assert_eq!(packet.filename_str()?, "somequest.dat");
        assert_eq!(packet.file_type(), QuestPacketFileType::Dat);

        Ok(())
    }

    #[test]
    pub fn create_quest_data_packet_via_new() -> Result<(), PacketError> {
        // bin
        let data = [0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08];
        let packet = QuestDataPacket::new("myquest.bin", &data, true)?;
        assert_eq!(packet.header.id(), PACKET_ID_QUEST_DATA_ONLINE);
        assert_eq!(packet.header.size(), QuestDataPacket::packet_size() as u16);
        assert_eq!(packet.filename_str()?, "myquest.bin");
        assert_eq!(packet.file_type(), QuestPacketFileType::Bin);
        assert_eq!(packet.data_size(), data.len() as u32);
        assert_eq!(packet.data(), data);

        // dat
        let data = [0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07];
        let packet = QuestDataPacket::new("thequest.dat", &data, true)?;
        assert_eq!(packet.header.id(), PACKET_ID_QUEST_DATA_ONLINE);
        assert_eq!(packet.header.size(), QuestDataPacket::packet_size() as u16);
        assert_eq!(packet.filename_str()?, "thequest.dat");
        assert_eq!(packet.file_type(), QuestPacketFileType::Dat);
        assert_eq!(packet.data_size(), data.len() as u32);
        assert_eq!(packet.data(), data);

        Ok(())
    }

    #[test]
    pub fn quest_header_packet_from_bytes_errors() -> Result<(), PacketError> {
        let mut bytes: &[u8] = &[0x42, 0x00, 0x3C, 0x00, 0x01, 0x02, 0x03, 0x04];
        assert_matches!(
            QuestHeaderPacket::from_bytes(&mut bytes),
            Err(PacketError::WrongId(0x42))
        );

        let mut bytes: &[u8] = &[0x44, 0x00, 0x10, 0x00, 0x01, 0x02, 0x03];
        assert_matches!(
            QuestHeaderPacket::from_bytes(&mut bytes),
            Err(PacketError::WrongSize(16))
        );

        Ok(())
    }

    #[test]
    pub fn quest_data_packet_from_bytes_errors() -> Result<(), PacketError> {
        let mut bytes: &[u8] = &[0xBB, 0x42, 0x18, 0x04, 0x11, 0x22, 0x33, 0x44];
        assert_matches!(
            QuestDataPacket::from_bytes(&mut bytes),
            Err(PacketError::WrongId(0xBB))
        );

        let mut bytes: &[u8] = &[0x13, 0x42, 0xAA, 0xBB, 0x11, 0x22, 0x33, 0x44];
        assert_matches!(
            QuestDataPacket::from_bytes(&mut bytes),
            Err(PacketError::WrongSize(0xBBAA))
        );

        // bad "size" value at the very end of the packet. too large, must be <= 1024
        let mut bytes: &[u8] = &[
            0xA7, 0x01, 0x18, 0x04, 0x64, 0x71, 0x75, 0x65, 0x73, 0x74, 0x35, 0x38, 0x2E, 0x62,
            0x69, 0x6E, 0x00, 0x00, 0x00, 0x00, 0xDB, 0xCF, 0x73, 0x74, 0x09, 0x46, 0x72, 0x65,
            0xB6, 0x44, 0xE8, 0xE9, 0xB3, 0xD6, 0xE6, 0x88, 0xF7, 0x3C, 0xF9, 0xC0, 0x05, 0xED,
            0x58, 0xE1, 0xAA, 0x17, 0x14, 0x70, 0xB4, 0xD0, 0x5A, 0x25, 0xA6, 0x85, 0x26, 0x24,
            0x19, 0xDF, 0x0C, 0xC4, 0x1F, 0x4B, 0xA6, 0xC1, 0xF1, 0x4E, 0x1C, 0x35, 0x56, 0x0C,
            0x31, 0xF7, 0x2F, 0xC8, 0x0B, 0xDC, 0xA0, 0xCD, 0x5F, 0xBE, 0x2C, 0x29, 0xF5, 0xE2,
            0x40, 0xA4, 0x9D, 0xD7, 0xC4, 0xFA, 0x74, 0x9B, 0x7A, 0xF2, 0x8A, 0xB6, 0x42, 0x3B,
            0xF8, 0x3A, 0x76, 0x78, 0xAA, 0x1B, 0xC4, 0xAA, 0xD3, 0x5E, 0x8A, 0x37, 0x94, 0xC0,
            0xA5, 0x21, 0x7F, 0x01, 0x8E, 0x68, 0x1A, 0xF4, 0xBC, 0xCA, 0x82, 0x02, 0xC1, 0x07,
            0x5C, 0xDB, 0xEE, 0x28, 0x92, 0x91, 0xF2, 0x6C, 0x79, 0x05, 0x8E, 0xC4, 0xB5, 0xAC,
            0xC7, 0x13, 0xD7, 0x5F, 0x8C, 0x0C, 0x21, 0x84, 0x29, 0xC1, 0xFF, 0x0B, 0x78, 0xCF,
            0x35, 0x87, 0xEB, 0xF8, 0x6E, 0x11, 0x41, 0x6A, 0xE4, 0xDD, 0x93, 0x3F, 0x1D, 0x63,
            0x3C, 0xA3, 0x3E, 0xAA, 0x5C, 0x62, 0x4A, 0x26, 0xFB, 0xBC, 0x55, 0xC9, 0x2A, 0x28,
            0xF7, 0xD2, 0x7A, 0x1B, 0x53, 0xCD, 0xF3, 0x67, 0xCD, 0x02, 0x0E, 0x26, 0xBA, 0x0B,
            0xCE, 0x44, 0x4B, 0x78, 0x6B, 0xE6, 0xDE, 0xC6, 0x06, 0x52, 0xD7, 0xCB, 0x97, 0x17,
            0xCB, 0x8A, 0x9A, 0x2C, 0x89, 0x68, 0x0A, 0x1D, 0x5E, 0xBA, 0xD1, 0x3B, 0xF5, 0x63,
            0x99, 0x70, 0x71, 0x2F, 0x37, 0x8A, 0x07, 0xFF, 0x59, 0x1F, 0x10, 0x45, 0xC0, 0x02,
            0x7E, 0xF6, 0xFF, 0x32, 0xB7, 0xAA, 0xD8, 0x0A, 0xF8, 0x43, 0x86, 0x30, 0x61, 0x48,
            0xEE, 0x8E, 0x0A, 0xB4, 0x2F, 0x85, 0x8F, 0x6D, 0x16, 0x96, 0x99, 0x2A, 0x5B, 0xE5,
            0x93, 0x47, 0x61, 0x30, 0xF3, 0x1F, 0x3E, 0x48, 0xFF, 0x6D, 0xE9, 0x64, 0xB8, 0xA3,
            0x6F, 0x33, 0xCD, 0x6D, 0x55, 0x40, 0xC2, 0x10, 0x1F, 0x0B, 0xBB, 0xBA, 0x77, 0xC6,
            0x7E, 0x82, 0x71, 0xA5, 0xEF, 0x25, 0x87, 0x06, 0x6B, 0x6B, 0x3D, 0x48, 0xBF, 0x1B,
            0x1A, 0x1C, 0x6C, 0x80, 0x6D, 0xC2, 0xCB, 0x15, 0x6F, 0x28, 0x66, 0xAA, 0xD9, 0xF0,
            0x53, 0xB5, 0xD0, 0x14, 0xCD, 0x19, 0xC9, 0xB0, 0xBC, 0x5A, 0x31, 0xF8, 0x5E, 0x96,
            0x54, 0xA0, 0xDF, 0x76, 0xE1, 0xEB, 0x0A, 0xC2, 0xF3, 0x96, 0x2D, 0x95, 0xD2, 0x49,
            0xCA, 0x10, 0x1D, 0xD1, 0x7A, 0xAF, 0x5B, 0x73, 0x71, 0xB6, 0x0A, 0xD8, 0x8F, 0xF1,
            0x4E, 0x5E, 0x3B, 0xA0, 0xD0, 0xB7, 0x3B, 0x96, 0xC0, 0x22, 0xDB, 0x2D, 0x6A, 0x95,
            0x4E, 0xC2, 0x95, 0x76, 0xB9, 0x14, 0xEC, 0x8E, 0x8D, 0x48, 0xD8, 0x41, 0x66, 0x74,
            0xD2, 0x81, 0xE8, 0xDA, 0x4B, 0xB6, 0x77, 0x92, 0x6E, 0xA3, 0x85, 0xF4, 0x67, 0x38,
            0x60, 0xD3, 0x5A, 0x38, 0x37, 0x8D, 0xE3, 0x7B, 0x20, 0xBA, 0x3E, 0x0E, 0x34, 0x15,
            0xBB, 0x17, 0x9A, 0xA9, 0xE0, 0xF0, 0x20, 0x28, 0x14, 0xD5, 0x94, 0x7B, 0xEF, 0xEF,
            0xBA, 0x7E, 0x41, 0x98, 0x41, 0x88, 0xA4, 0x8B, 0xC8, 0x5D, 0x2C, 0xBD, 0xE2, 0x13,
            0xC4, 0x00, 0xC9, 0x6A, 0x1A, 0x43, 0x75, 0xDA, 0x0C, 0xCE, 0x3D, 0x1E, 0x8E, 0xA4,
            0x0F, 0xD8, 0x4C, 0xAE, 0x60, 0x46, 0xA3, 0xF0, 0x98, 0x35, 0x90, 0x86, 0xE9, 0x04,
            0xF9, 0xA1, 0x05, 0xBC, 0xA9, 0x11, 0x7B, 0xE9, 0xA6, 0x3D, 0x80, 0x37, 0x94, 0xAE,
            0xCC, 0x44, 0x67, 0xD1, 0x8B, 0x7D, 0xDC, 0x25, 0xED, 0x55, 0xB2, 0x50, 0x30, 0xAA,
            0x8B, 0x4D, 0x50, 0xC8, 0x19, 0xEA, 0x7F, 0x80, 0x5E, 0xDA, 0xF2, 0x2B, 0xED, 0x70,
            0xBE, 0xD7, 0x2A, 0xE5, 0x66, 0x09, 0x7D, 0x05, 0x2E, 0xE5, 0x19, 0x49, 0xA9, 0x0D,
            0xB5, 0xA9, 0x55, 0x52, 0xCE, 0x06, 0x31, 0x65, 0x3E, 0x09, 0x7F, 0x07, 0x5D, 0x51,
            0xCD, 0x96, 0xB6, 0xA3, 0x65, 0x38, 0x52, 0x37, 0x69, 0xC3, 0xA0, 0x4E, 0xEE, 0x65,
            0xBA, 0x3C, 0x0B, 0x5C, 0x2B, 0x23, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x34, 0x56, 0x78,
        ];
        assert_matches!(
            QuestDataPacket::from_bytes(&mut bytes),
            Err(PacketError::DataFormatError(..))
        );

        Ok(())
    }

    #[test]
    pub fn quest_header_packet_via_new_errors() -> Result<(), PacketError> {
        assert_matches!(
            QuestHeaderPacket::new(
                "this string is too long and will not fit in the space available for a quest name",
                Language::English,
                "quest.bin",
                12345,
                true
            ),
            Err(PacketError::DataFormatError(..))
        );

        assert_matches!(
            QuestHeaderPacket::new(
                "A Quest!",
                Language::English,
                "thisfilenameistoolong.bin",
                42,
                false
            ),
            Err(PacketError::DataFormatError(..))
        );

        Ok(())
    }

    #[test]
    pub fn quest_data_packet_via_new_errors() -> Result<(), PacketError> {
        assert_matches!(
            QuestDataPacket::new("areallylongfilename.dat", &[0x01, 0x02, 0x03], true),
            Err(PacketError::DataFormatError(..))
        );

        let lots_of_data = [0x42u8].repeat(2048);
        assert_matches!(
            QuestDataPacket::new("thequest.bin", &lots_of_data, false),
            Err(PacketError::DataFormatError(..))
        );

        Ok(())
    }
}
